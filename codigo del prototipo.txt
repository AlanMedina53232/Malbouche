#include <WiFi.h>
#include <WebServer.h>
#include <time.h>

// --- Configuración WiFi ---
const char* ssid = "4-D";
const char* password = "nachosconqueso";

// --- Pines motores 28BYJ-48 ---
const int motorHoras[4] = {14, 27, 26, 25};
const int motorMin[4] = {19, 18, 5, 4};

// --- Secuencia medio paso ---
const int steps[8][4] = {
  {1,0,0,0},
  {1,1,0,0},
  {0,1,0,0},
  {0,1,1,0},
  {0,0,1,0},
  {0,0,1,1},
  {0,0,0,1},
  {1,0,0,1}
};

WebServer server(80);

// --- Parámetros reloj ---
const int pasosPorVuelta = 512;
const int pasosPorHora = pasosPorVuelta / 12;     // ~42.6
const int pasosPorMinuto = pasosPorVuelta / 60;   // ~8.53

// Variables de estado
enum Modo { STOP, LEFT, RIGHT, CRAZY, NORMAL, SWING };
Modo modoActual = STOP;

// Posiciones actuales de pasos
int posHoras = 0;
int posMin = 0;

// Índices de paso para la secuencia medio paso (para mover motores)
int stepIndexHoras = 0;
int stepIndexMin = 0;

// Para control de avance automático en modo NORMAL
unsigned long ultimoAvance = 0;
const unsigned long intervaloAvanceMs = 1000; // cada segundo avanzamos segundos

// Para modo SWING
bool swingSentido = true;
unsigned long swingUltimoMovimiento = 0;
const unsigned long swingIntervalo = 500; // 0.5 segundos

// Velocidad (delay ms) entre pasos, default 2 ms
int velocidadPaso = 2;

// --- Declaración funciones ---
void girarUnPaso(const int motorPins[4], int &stepIndex, bool sentidoHorario);
void moverPasos(const int motorPins[4], int &stepIndex, int pasos, bool sentidoHorario);
void apagarMotor(const int motorPins[4]);
void sincronizarHoraReal();

void setup() {
  Serial.begin(115200);

  // Configurar pines motores
  for (int i=0; i<4; i++) {
    pinMode(motorHoras[i], OUTPUT);
    pinMode(motorMin[i], OUTPUT);
    digitalWrite(motorHoras[i], LOW);
    digitalWrite(motorMin[i], LOW);
  }

  // Conectar WiFi
  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi...");
  while(WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  // Configurar NTP (GMT -6 sin horario verano)
  configTime(-6 * 3600, 0, "pool.ntp.org", "time.nist.gov");

  // Rutas servidor web
  server.on("/", []() {
    String html = "<h1>Reloj 28BYJ-48 ESP32</h1>";
    html += "<p>Modos disponibles: /left /right /crazy /normal /stop /swing</p>";
    html += "<p>Ajustar velocidad: /speed?value=1-100</p>";
    server.send(200, "text/html", html);
  });

  server.on("/left", [](){
    modoActual = LEFT;
    server.send(200, "text/plain", "Modo LEFT activado");
    Serial.println("Modo LEFT activado");
  });

  server.on("/right", [](){
    modoActual = RIGHT;
    server.send(200, "text/plain", "Modo RIGHT activado");
    Serial.println("Modo RIGHT activado");
  });

  server.on("/crazy", [](){
    modoActual = CRAZY;
    server.send(200, "text/plain", "Modo CRAZY activado");
    Serial.println("Modo CRAZY activado");
  });

  server.on("/normal", [](){
    sincronizarHoraReal(); // sincroniza al cambiar a modo normal
    modoActual = NORMAL;
    server.send(200, "text/plain", "Modo NORMAL activado");
    Serial.println("Modo NORMAL activado");
  });

  server.on("/stop", [](){
    modoActual = STOP;
    apagarMotor(motorHoras);
    apagarMotor(motorMin);
    server.send(200, "text/plain", "Motores detenidos");
    Serial.println("Motores detenidos");
  });

  server.on("/swing", [](){
    modoActual = SWING;
    server.send(200, "text/plain", "Modo SWING activado");
    Serial.println("Modo SWING activado");
  });

  // Ruta para ajustar velocidad
  server.on("/speed", []() {
    if (server.hasArg("value")) {
      int val = server.arg("value").toInt();
      if (val < 1) val = 1;
      if (val > 100) val = 100;
      // Mapear valor 1-100 a delay 10-1 ms (velocidad inversa)
      velocidadPaso = map(val, 1, 100, 10, 1);
      server.send(200, "text/plain", "Velocidad ajustada a " + String(val));
      Serial.printf("Velocidad paso ajustada a %d (delay ms: %d)\n", val, velocidadPaso);
    } else {
      server.send(400, "text/plain", "Falta parámetro value");
    }
  });

  server.begin();
}

// --- Loop principal ---
void loop() {
  server.handleClient();

  switch(modoActual) {
    case LEFT:
      girarUnPaso(motorHoras, stepIndexHoras, true);
      delay(velocidadPaso);
      girarUnPaso(motorMin, stepIndexMin, true);
      delay(velocidadPaso);
      break;

    case RIGHT:
      girarUnPaso(motorHoras, stepIndexHoras, false);
      delay(velocidadPaso);
      girarUnPaso(motorMin, stepIndexMin, false);
      delay(velocidadPaso);
      break;

    case CRAZY:
      girarUnPaso(motorHoras, stepIndexHoras, true);
      delay(velocidadPaso);
      girarUnPaso(motorMin, stepIndexMin, false);
      delay(velocidadPaso);
      break;

    case NORMAL:
      {
        unsigned long now = millis();
        if (now - ultimoAvance >= intervaloAvanceMs) {
          ultimoAvance = now;

          struct tm timeinfo;
          if (getLocalTime(&timeinfo)) {
            int hora = timeinfo.tm_hour % 12;
            int minuto = timeinfo.tm_min;

            int pasosHoraEsperado = hora * pasosPorHora + (minuto * pasosPorHora / 60);
            int pasosMinutoEsperado = minuto * pasosPorMinuto;

            int deltaHoras = pasosHoraEsperado - posHoras;
            if (deltaHoras != 0) {
              bool dirHoras = (deltaHoras > 0);
              moverPasos(motorHoras, stepIndexHoras, abs(deltaHoras), dirHoras);
              posHoras = pasosHoraEsperado;
            }

            int deltaMinutos = pasosMinutoEsperado - posMin;
            if (deltaMinutos != 0) {
              bool dirMin = (deltaMinutos > 0);
              moverPasos(motorMin, stepIndexMin, abs(deltaMinutos), dirMin);
              posMin = pasosMinutoEsperado;
            }
          } else {
            Serial.println("No se pudo obtener hora NTP");
          }
        }
      }
      break;

    case SWING:
      {
        static bool sentido = true;
        static unsigned long lastMove = 0;
        const unsigned long intervalo = 100;
        if (millis() - lastMove > intervalo) {
          moverPasos(motorHoras, stepIndexHoras, 5, sentido);
          moverPasos(motorMin, stepIndexMin, 5, sentido);
          sentido = !sentido;
          lastMove = millis();
        }
      }
      break;

    case STOP:
      apagarMotor(motorHoras);
      apagarMotor(motorMin);
      delay(100);
      break;
  }
}

// --- Función para girar 1 paso ---
void girarUnPaso(const int motorPins[4], int &stepIndex, bool sentidoHorario) {
  stepIndex = sentidoHorario ? (stepIndex + 1) % 8 : (stepIndex + 7) % 8;
  for (int i=0; i<4; i++) {
    digitalWrite(motorPins[i], steps[stepIndex][i]);
  }
}

// --- Función para mover N pasos ---
void moverPasos(const int motorPins[4], int &stepIndex, int pasos, bool sentidoHorario) {
  for (int i=0; i<pasos; i++) {
    girarUnPaso(motorPins, stepIndex, sentidoHorario);
    delay(velocidadPaso);
  }
}

// --- Apagar motor (todos pines LOW) ---
void apagarMotor(const int motorPins[4]) {
  for (int i=0; i<4; i++) {
    digitalWrite(motorPins[i], LOW);
  }
}

// --- Sincronizar la hora real ---
void sincronizarHoraReal() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("No se pudo obtener hora NTP para sincronizar");
    return;
  }

  int hora = timeinfo.tm_hour % 12;
  int minuto = timeinfo.tm_min;

  int pasosHoraEsperado = hora * pasosPorHora + (minuto * pasosPorHora / 60);
  int pasosMinutoEsperado = minuto * pasosPorMinuto;

  int deltaHoras = pasosHoraEsperado - posHoras;
  int deltaMinutos = pasosMinutoEsperado - posMin;

  if (deltaHoras != 0) {
    bool dirHoras = (deltaHoras > 0);
    moverPasos(motorHoras, stepIndexHoras, abs(deltaHoras), dirHoras);
    posHoras = pasosHoraEsperado;
  }
  if (deltaMinutos != 0) {
    bool dirMin = (deltaMinutos > 0);
    moverPasos(motorMin, stepIndexMin, abs(deltaMinutos), dirMin);
    posMin = pasosMinutoEsperado;
  }

  Serial.printf("Sincronizado a %02d:%02d\n", hora, minuto);
}

