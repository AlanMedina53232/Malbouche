#include <WiFi.h>
#include <WebServer.h>
#include <time.h>

const char* ssid = "IZZI-35CC";
const char* password = "F0AF85CC35CC";

#define dirPinHoras 32
#define stepPinHoras 14
#define dirPinMinutos 33
#define stepPinMinutos 13

const bool HORARIO = true;
const bool ANTIHORARIO = false;

int velocidadUs = 1000;  // microsegundos por paso, se ajusta con la app
const int velocidadMinimaUs = 200; // velocidad m√≠nima permitida

// Variables para almacenar informaci√≥n de movimiento
String nombreMovimiento = "normal"; // Nombre del movimiento actual
bool direccionHoras = HORARIO;     // Direcci√≥n del motor de horas
bool direccionMinutos = HORARIO;   // Direcci√≥n del motor de minutos
int velocidadHoras = 50;           // Velocidad del motor de horas (0-100)
int velocidadMinutos = 50;         // Velocidad del motor de minutos (0-100)

enum Modo { STOP, LEFT, RIGHT, CRAZY, NORMAL, CUSTOM };
Modo modoActual = STOP;

bool estadoStepHoras = false;
bool estadoStepMinutos = false;

unsigned long ultimoPasoHorasMicros = 0;
unsigned long ultimoPasoMinutosMicros = 0;

WebServer server(80);

void cambiarModo(Modo nuevoModo) {
  modoActual = nuevoModo;
  ultimoPasoHorasMicros = micros(); // reset para evitar delay al cambiar modo
  ultimoPasoMinutosMicros = micros();
  Serial.printf("Modo cambiado a %d\n", modoActual);
}

void darPaso(int pinStep, bool &estadoStep) {
  estadoStep = !estadoStep;
  digitalWrite(pinStep, estadoStep ? HIGH : LOW);
}

void sincronizarHora() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("‚ö†Ô∏è No se pudo obtener hora NTP");
    return;
  }
  Serial.printf("‚è∞ Hora NTP: %02d:%02d:%02d\n", timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);
}

// Nueva funci√≥n para actualizar movimiento con par√°metros recibidos
void actualizarMovimientoDesdeParametros() {
  // Obtener par√°metros de la solicitud HTTP
  if (server.hasArg("nombre")) {
    nombreMovimiento = server.arg("nombre");
    Serial.printf("Nombre movimiento: %s\n", nombreMovimiento.c_str());
    
    // Configurar modo seg√∫n el nombre del movimiento
    if (nombreMovimiento == "left") {
      direccionHoras = ANTIHORARIO;
      direccionMinutos = ANTIHORARIO;
      cambiarModo(LEFT);
    } 
    else if (nombreMovimiento == "right") {
      direccionHoras = HORARIO;
      direccionMinutos = HORARIO;
      cambiarModo(RIGHT);
    }
    else if (nombreMovimiento == "crazy") {
      direccionHoras = HORARIO;
      direccionMinutos = ANTIHORARIO;
      cambiarModo(CRAZY);
    }
    else if (nombreMovimiento == "stop") {
      cambiarModo(STOP);
    }
    else if (nombreMovimiento == "normal") {
      cambiarModo(NORMAL);
    }
    else {
      // Movimiento personalizado
      cambiarModo(CUSTOM);
      
      // Usar par√°metros espec√≠ficos de direcci√≥n si est√°n disponibles
      if (server.hasArg("dirHoras")) {
        String dirH = server.arg("dirHoras");
        direccionHoras = (dirH == "horario" || dirH == "derecha") ? HORARIO : ANTIHORARIO;
      }
      
      if (server.hasArg("dirMinutos")) {
        String dirM = server.arg("dirMinutos");
        direccionMinutos = (dirM == "horario" || dirM == "derecha") ? HORARIO : ANTIHORARIO;
      }
    }
  }
  
  // Actualizar velocidades si est√°n disponibles
  if (server.hasArg("velHoras")) {
    velocidadHoras = constrain(server.arg("velHoras").toInt(), 0, 100);
  }
  
  if (server.hasArg("velMinutos")) {
    velocidadMinutos = constrain(server.arg("velMinutos").toInt(), 0, 100);
  }
  
  // Si solo hay un par√°metro de velocidad general, aplicarlo a ambos motores
  if (server.hasArg("velocidad")) {
    int vel = constrain(server.arg("velocidad").toInt(), 0, 100);
    velocidadHoras = vel;
    velocidadMinutos = vel;
  }
  
  // Imprimir configuraci√≥n actualizada
  Serial.println("‚úÖ Movimiento actualizado desde par√°metros HTTP:");
  Serial.printf("  - Nombre: %s\n", nombreMovimiento.c_str());
  Serial.printf("  - Modo: %d\n", modoActual);
  Serial.printf("  - Direcci√≥n horas: %s\n", direccionHoras ? "HORARIO" : "ANTIHORARIO");
  Serial.printf("  - Direcci√≥n minutos: %s\n", direccionMinutos ? "HORARIO" : "ANTIHORARIO");
  Serial.printf("  - Velocidad horas: %d\n", velocidadHoras);
  Serial.printf("  - Velocidad minutos: %d\n", velocidadMinutos);
}

void setup() {
  Serial.begin(115200);

  pinMode(stepPinHoras, OUTPUT);
  pinMode(dirPinHoras, OUTPUT);
  pinMode(stepPinMinutos, OUTPUT);
  pinMode(dirPinMinutos, OUTPUT);

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Conectado");
  Serial.print("üì° IP: ");
  Serial.println(WiFi.localIP());

  configTime(-6 * 3600, 0, "pool.ntp.org", "time.nist.gov");

  server.on("/", []() {
    String mensaje = "Reloj ESP32 funcionando. Modo actual: ";
    switch (modoActual) {
      case NORMAL: mensaje += "NORMAL"; break;
      case LEFT: mensaje += "LEFT"; break;
      case RIGHT: mensaje += "RIGHT"; break;
      case CRAZY: mensaje += "CRAZY"; break;
      case STOP: mensaje += "STOP"; break;
      case CUSTOM: mensaje += "CUSTOM"; break;
    }
    mensaje += ". Movimiento: " + nombreMovimiento;
    server.send(200, "text/plain", mensaje);
  });

  server.on("/normal", []() {
    cambiarModo(NORMAL);
    nombreMovimiento = "normal";
    server.send(200, "text/plain", "Modo: NORMAL");
  });

  server.on("/left", []() {
    cambiarModo(LEFT);
    nombreMovimiento = "left";
    direccionHoras = ANTIHORARIO;
    direccionMinutos = ANTIHORARIO;
    server.send(200, "text/plain", "Modo: LEFT");
  });

  server.on("/right", []() {
    cambiarModo(RIGHT);
    nombreMovimiento = "right";
    direccionHoras = HORARIO;
    direccionMinutos = HORARIO;
    server.send(200, "text/plain", "Modo: RIGHT");
  });

  server.on("/crazy", []() {
    cambiarModo(CRAZY);
    nombreMovimiento = "crazy";
    direccionHoras = HORARIO;
    direccionMinutos = ANTIHORARIO;
    server.send(200, "text/plain", "Modo: CRAZY");
  });

  server.on("/stop", []() {
    cambiarModo(STOP);
    nombreMovimiento = "stop";
    server.send(200, "text/plain", "Modo: STOP");
  });

  server.on("/speed", []() {
    if (server.hasArg("value")) {
      int val = constrain(server.arg("value").toInt(), 0, 100);
      velocidadUs = map(val, 0, 100, 2000, velocidadMinimaUs);
      if (velocidadUs < velocidadMinimaUs) velocidadUs = velocidadMinimaUs;
      velocidadHoras = val;
      velocidadMinutos = val;
      Serial.printf("Velocidad ajustada: %d us (valor %d)\n", velocidadUs, val);
      server.send(200, "text/plain", "Velocidad ajustada a " + String(val));
    } else {
      server.send(400, "text/plain", "Falta par√°metro 'value'");
    }
  });

  // NUEVO: Endpoint para recibir movimientos desde la app con par√°metros de la BD
  server.on("/update-movement", []() {
    actualizarMovimientoDesdeParametros();
    server.send(200, "text/plain", "Movimiento actualizado: " + nombreMovimiento);
  });

  server.begin();
  Serial.println("üåê Servidor iniciado en puerto 80");
}

void loop() {
  server.handleClient();

  unsigned long ahoraMicros = micros();
  unsigned long ahoraMillis = millis();

  // En modo normal, solo sincronizamos la hora pero no movemos motores
  if (modoActual == NORMAL) {
    static unsigned long ultimoSync = 0;
    if (ahoraMillis - ultimoSync >= 1000) {
      ultimoSync = ahoraMillis;
      sincronizarHora();
    }
    return;
  }

  // En modo STOP, no movemos motores
  if (modoActual == STOP) {
    return;
  }

  // Para modos LEFT, RIGHT, CRAZY y CUSTOM, controlamos los motores
  if (modoActual == LEFT || modoActual == RIGHT || modoActual == CRAZY || modoActual == CUSTOM) {
    // Motor de horas
    int velocidadHorasUs = map(velocidadHoras, 0, 100, 2000, velocidadMinimaUs);
    if (velocidadHorasUs < velocidadMinimaUs) velocidadHorasUs = velocidadMinimaUs;
    
    if (ahoraMicros - ultimoPasoHorasMicros >= (unsigned long)velocidadHorasUs) {
      ultimoPasoHorasMicros = ahoraMicros;
      digitalWrite(dirPinHoras, direccionHoras ? HIGH : LOW);
      darPaso(stepPinHoras, estadoStepHoras);
    }
    
    // Motor de minutos
    int velocidadMinutosUs = map(velocidadMinutos, 0, 100, 2000, velocidadMinimaUs);
    if (velocidadMinutosUs < velocidadMinimaUs) velocidadMinutosUs = velocidadMinimaUs;
    
    if (ahoraMicros - ultimoPasoMinutosMicros >= (unsigned long)velocidadMinutosUs) {
      ultimoPasoMinutosMicros = ahoraMicros;
      digitalWrite(dirPinMinutos, direccionMinutos ? HIGH : LOW);
      darPaso(stepPinMinutos, estadoStepMinutos);
    }
  }
}